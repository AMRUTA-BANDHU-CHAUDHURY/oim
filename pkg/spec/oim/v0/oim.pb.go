// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oim.proto

package oim

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterControllerRequest struct {
	// An identifier for the OIM controller which is unique
	// among all controllers connected to the OIM registry.
	ControllerId string `protobuf:"bytes,1,opt,name=controller_id,json=controllerId" json:"controller_id,omitempty"`
	// A string that can be used for grpc.Dial to connect
	// to the OIM controller.
	// See https://github.com/grpc/grpc/blob/master/doc/naming.md.
	// An empty string removes the database entry.
	Address              string   `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterControllerRequest) Reset()         { *m = RegisterControllerRequest{} }
func (m *RegisterControllerRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterControllerRequest) ProtoMessage()    {}
func (*RegisterControllerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{0}
}
func (m *RegisterControllerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterControllerRequest.Unmarshal(m, b)
}
func (m *RegisterControllerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterControllerRequest.Marshal(b, m, deterministic)
}
func (dst *RegisterControllerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterControllerRequest.Merge(dst, src)
}
func (m *RegisterControllerRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterControllerRequest.Size(m)
}
func (m *RegisterControllerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterControllerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterControllerRequest proto.InternalMessageInfo

func (m *RegisterControllerRequest) GetControllerId() string {
	if m != nil {
		return m.ControllerId
	}
	return ""
}

func (m *RegisterControllerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RegisterControllerReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterControllerReply) Reset()         { *m = RegisterControllerReply{} }
func (m *RegisterControllerReply) String() string { return proto.CompactTextString(m) }
func (*RegisterControllerReply) ProtoMessage()    {}
func (*RegisterControllerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{1}
}
func (m *RegisterControllerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterControllerReply.Unmarshal(m, b)
}
func (m *RegisterControllerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterControllerReply.Marshal(b, m, deterministic)
}
func (dst *RegisterControllerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterControllerReply.Merge(dst, src)
}
func (m *RegisterControllerReply) XXX_Size() int {
	return xxx_messageInfo_RegisterControllerReply.Size(m)
}
func (m *RegisterControllerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterControllerReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterControllerReply proto.InternalMessageInfo

type MapVolumeRequest struct {
	// An identifier for the volume that must be unique
	// among all volumes mapped by the OIM controller.
	// All calls with the same identifier must have the
	// same parameters.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// These parameters define how to access the volume.
	//
	// Types that are valid to be assigned to Params:
	//	*MapVolumeRequest_Malloc
	//	*MapVolumeRequest_Ceph
	Params               isMapVolumeRequest_Params `protobuf_oneof:"params"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MapVolumeRequest) Reset()         { *m = MapVolumeRequest{} }
func (m *MapVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*MapVolumeRequest) ProtoMessage()    {}
func (*MapVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{2}
}
func (m *MapVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapVolumeRequest.Unmarshal(m, b)
}
func (m *MapVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapVolumeRequest.Marshal(b, m, deterministic)
}
func (dst *MapVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapVolumeRequest.Merge(dst, src)
}
func (m *MapVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_MapVolumeRequest.Size(m)
}
func (m *MapVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapVolumeRequest proto.InternalMessageInfo

type isMapVolumeRequest_Params interface {
	isMapVolumeRequest_Params()
}

type MapVolumeRequest_Malloc struct {
	Malloc *MallocParams `protobuf:"bytes,2,opt,name=malloc,oneof"`
}
type MapVolumeRequest_Ceph struct {
	Ceph *CephParams `protobuf:"bytes,3,opt,name=ceph,oneof"`
}

func (*MapVolumeRequest_Malloc) isMapVolumeRequest_Params() {}
func (*MapVolumeRequest_Ceph) isMapVolumeRequest_Params()   {}

func (m *MapVolumeRequest) GetParams() isMapVolumeRequest_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *MapVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *MapVolumeRequest) GetMalloc() *MallocParams {
	if x, ok := m.GetParams().(*MapVolumeRequest_Malloc); ok {
		return x.Malloc
	}
	return nil
}

func (m *MapVolumeRequest) GetCeph() *CephParams {
	if x, ok := m.GetParams().(*MapVolumeRequest_Ceph); ok {
		return x.Ceph
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MapVolumeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MapVolumeRequest_OneofMarshaler, _MapVolumeRequest_OneofUnmarshaler, _MapVolumeRequest_OneofSizer, []interface{}{
		(*MapVolumeRequest_Malloc)(nil),
		(*MapVolumeRequest_Ceph)(nil),
	}
}

func _MapVolumeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MapVolumeRequest)
	// params
	switch x := m.Params.(type) {
	case *MapVolumeRequest_Malloc:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Malloc); err != nil {
			return err
		}
	case *MapVolumeRequest_Ceph:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ceph); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MapVolumeRequest.Params has unexpected type %T", x)
	}
	return nil
}

func _MapVolumeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MapVolumeRequest)
	switch tag {
	case 2: // params.malloc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MallocParams)
		err := b.DecodeMessage(msg)
		m.Params = &MapVolumeRequest_Malloc{msg}
		return true, err
	case 3: // params.ceph
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CephParams)
		err := b.DecodeMessage(msg)
		m.Params = &MapVolumeRequest_Ceph{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MapVolumeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MapVolumeRequest)
	// params
	switch x := m.Params.(type) {
	case *MapVolumeRequest_Malloc:
		s := proto.Size(x.Malloc)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MapVolumeRequest_Ceph:
		s := proto.Size(x.Ceph)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// For testing purposes, an existing Malloc BDev can be used.
// It needs to be provisioned separately to ensure that its
// data survives multiple Map/Unmap operations. It's name
// must be <volume_id>.
type MallocParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MallocParams) Reset()         { *m = MallocParams{} }
func (m *MallocParams) String() string { return proto.CompactTextString(m) }
func (*MallocParams) ProtoMessage()    {}
func (*MallocParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{3}
}
func (m *MallocParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MallocParams.Unmarshal(m, b)
}
func (m *MallocParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MallocParams.Marshal(b, m, deterministic)
}
func (dst *MallocParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MallocParams.Merge(dst, src)
}
func (m *MallocParams) XXX_Size() int {
	return xxx_messageInfo_MallocParams.Size(m)
}
func (m *MallocParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MallocParams.DiscardUnknown(m)
}

var xxx_messageInfo_MallocParams proto.InternalMessageInfo

// Defines a Ceph block device. This is currently a placeholder
// to demonstrate how MapVolumeRequest.params will work.
type CephParams struct {
	Secret               string   `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CephParams) Reset()         { *m = CephParams{} }
func (m *CephParams) String() string { return proto.CompactTextString(m) }
func (*CephParams) ProtoMessage()    {}
func (*CephParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{4}
}
func (m *CephParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CephParams.Unmarshal(m, b)
}
func (m *CephParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CephParams.Marshal(b, m, deterministic)
}
func (dst *CephParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CephParams.Merge(dst, src)
}
func (m *CephParams) XXX_Size() int {
	return xxx_messageInfo_CephParams.Size(m)
}
func (m *CephParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CephParams.DiscardUnknown(m)
}

var xxx_messageInfo_CephParams proto.InternalMessageInfo

func (m *CephParams) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

// The reply tells the caller enough about the mapped volume
// to find it in /sys/dev/block.
type MapVolumeReply struct {
	// This string must be a substring of the symlink target
	// and has to be long enough to avoid mismatches.
	// Example: /devices/pci0000:00/0000:00:15.0/ for a QEMU
	// vhost SCSI device with bus=pci.0,addr=0x15
	Device string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	// The SCSI target and LUN in the format
	// x:y without extra zeros. Empty for non-SCSI
	// controllers.
	Scsi                 string   `protobuf:"bytes,2,opt,name=scsi" json:"scsi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapVolumeReply) Reset()         { *m = MapVolumeReply{} }
func (m *MapVolumeReply) String() string { return proto.CompactTextString(m) }
func (*MapVolumeReply) ProtoMessage()    {}
func (*MapVolumeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{5}
}
func (m *MapVolumeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapVolumeReply.Unmarshal(m, b)
}
func (m *MapVolumeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapVolumeReply.Marshal(b, m, deterministic)
}
func (dst *MapVolumeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapVolumeReply.Merge(dst, src)
}
func (m *MapVolumeReply) XXX_Size() int {
	return xxx_messageInfo_MapVolumeReply.Size(m)
}
func (m *MapVolumeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MapVolumeReply.DiscardUnknown(m)
}

var xxx_messageInfo_MapVolumeReply proto.InternalMessageInfo

func (m *MapVolumeReply) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *MapVolumeReply) GetScsi() string {
	if m != nil {
		return m.Scsi
	}
	return ""
}

type UnmapVolumeRequest struct {
	// The volume ID that was used when mapping the volume.
	VolumeId             string   `protobuf:"bytes,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnmapVolumeRequest) Reset()         { *m = UnmapVolumeRequest{} }
func (m *UnmapVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*UnmapVolumeRequest) ProtoMessage()    {}
func (*UnmapVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{6}
}
func (m *UnmapVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnmapVolumeRequest.Unmarshal(m, b)
}
func (m *UnmapVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnmapVolumeRequest.Marshal(b, m, deterministic)
}
func (dst *UnmapVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnmapVolumeRequest.Merge(dst, src)
}
func (m *UnmapVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_UnmapVolumeRequest.Size(m)
}
func (m *UnmapVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnmapVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnmapVolumeRequest proto.InternalMessageInfo

func (m *UnmapVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

type UnmapVolumeReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnmapVolumeReply) Reset()         { *m = UnmapVolumeReply{} }
func (m *UnmapVolumeReply) String() string { return proto.CompactTextString(m) }
func (*UnmapVolumeReply) ProtoMessage()    {}
func (*UnmapVolumeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{7}
}
func (m *UnmapVolumeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnmapVolumeReply.Unmarshal(m, b)
}
func (m *UnmapVolumeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnmapVolumeReply.Marshal(b, m, deterministic)
}
func (dst *UnmapVolumeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnmapVolumeReply.Merge(dst, src)
}
func (m *UnmapVolumeReply) XXX_Size() int {
	return xxx_messageInfo_UnmapVolumeReply.Size(m)
}
func (m *UnmapVolumeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UnmapVolumeReply.DiscardUnknown(m)
}

var xxx_messageInfo_UnmapVolumeReply proto.InternalMessageInfo

type ProvisionMallocBDevRequest struct {
	// The desired name of the new BDev.
	BdevName string `protobuf:"bytes,1,opt,name=bdev_name,json=bdevName" json:"bdev_name,omitempty"`
	// The desired size in bytes. Must be a multiple of 512.
	Size                 int64    `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProvisionMallocBDevRequest) Reset()         { *m = ProvisionMallocBDevRequest{} }
func (m *ProvisionMallocBDevRequest) String() string { return proto.CompactTextString(m) }
func (*ProvisionMallocBDevRequest) ProtoMessage()    {}
func (*ProvisionMallocBDevRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{8}
}
func (m *ProvisionMallocBDevRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionMallocBDevRequest.Unmarshal(m, b)
}
func (m *ProvisionMallocBDevRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionMallocBDevRequest.Marshal(b, m, deterministic)
}
func (dst *ProvisionMallocBDevRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionMallocBDevRequest.Merge(dst, src)
}
func (m *ProvisionMallocBDevRequest) XXX_Size() int {
	return xxx_messageInfo_ProvisionMallocBDevRequest.Size(m)
}
func (m *ProvisionMallocBDevRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionMallocBDevRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionMallocBDevRequest proto.InternalMessageInfo

func (m *ProvisionMallocBDevRequest) GetBdevName() string {
	if m != nil {
		return m.BdevName
	}
	return ""
}

func (m *ProvisionMallocBDevRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ProvisionMallocBDevReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProvisionMallocBDevReply) Reset()         { *m = ProvisionMallocBDevReply{} }
func (m *ProvisionMallocBDevReply) String() string { return proto.CompactTextString(m) }
func (*ProvisionMallocBDevReply) ProtoMessage()    {}
func (*ProvisionMallocBDevReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{9}
}
func (m *ProvisionMallocBDevReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionMallocBDevReply.Unmarshal(m, b)
}
func (m *ProvisionMallocBDevReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionMallocBDevReply.Marshal(b, m, deterministic)
}
func (dst *ProvisionMallocBDevReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionMallocBDevReply.Merge(dst, src)
}
func (m *ProvisionMallocBDevReply) XXX_Size() int {
	return xxx_messageInfo_ProvisionMallocBDevReply.Size(m)
}
func (m *ProvisionMallocBDevReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionMallocBDevReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionMallocBDevReply proto.InternalMessageInfo

type CheckMallocBDevRequest struct {
	// The name of an existing BDev.
	BdevName             string   `protobuf:"bytes,1,opt,name=bdev_name,json=bdevName" json:"bdev_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckMallocBDevRequest) Reset()         { *m = CheckMallocBDevRequest{} }
func (m *CheckMallocBDevRequest) String() string { return proto.CompactTextString(m) }
func (*CheckMallocBDevRequest) ProtoMessage()    {}
func (*CheckMallocBDevRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{10}
}
func (m *CheckMallocBDevRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckMallocBDevRequest.Unmarshal(m, b)
}
func (m *CheckMallocBDevRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckMallocBDevRequest.Marshal(b, m, deterministic)
}
func (dst *CheckMallocBDevRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckMallocBDevRequest.Merge(dst, src)
}
func (m *CheckMallocBDevRequest) XXX_Size() int {
	return xxx_messageInfo_CheckMallocBDevRequest.Size(m)
}
func (m *CheckMallocBDevRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckMallocBDevRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckMallocBDevRequest proto.InternalMessageInfo

func (m *CheckMallocBDevRequest) GetBdevName() string {
	if m != nil {
		return m.BdevName
	}
	return ""
}

type CheckMallocBDevReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckMallocBDevReply) Reset()         { *m = CheckMallocBDevReply{} }
func (m *CheckMallocBDevReply) String() string { return proto.CompactTextString(m) }
func (*CheckMallocBDevReply) ProtoMessage()    {}
func (*CheckMallocBDevReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_oim_fdf6812384e30b76, []int{11}
}
func (m *CheckMallocBDevReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckMallocBDevReply.Unmarshal(m, b)
}
func (m *CheckMallocBDevReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckMallocBDevReply.Marshal(b, m, deterministic)
}
func (dst *CheckMallocBDevReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckMallocBDevReply.Merge(dst, src)
}
func (m *CheckMallocBDevReply) XXX_Size() int {
	return xxx_messageInfo_CheckMallocBDevReply.Size(m)
}
func (m *CheckMallocBDevReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckMallocBDevReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckMallocBDevReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterControllerRequest)(nil), "oim.v0.RegisterControllerRequest")
	proto.RegisterType((*RegisterControllerReply)(nil), "oim.v0.RegisterControllerReply")
	proto.RegisterType((*MapVolumeRequest)(nil), "oim.v0.MapVolumeRequest")
	proto.RegisterType((*MallocParams)(nil), "oim.v0.MallocParams")
	proto.RegisterType((*CephParams)(nil), "oim.v0.CephParams")
	proto.RegisterType((*MapVolumeReply)(nil), "oim.v0.MapVolumeReply")
	proto.RegisterType((*UnmapVolumeRequest)(nil), "oim.v0.UnmapVolumeRequest")
	proto.RegisterType((*UnmapVolumeReply)(nil), "oim.v0.UnmapVolumeReply")
	proto.RegisterType((*ProvisionMallocBDevRequest)(nil), "oim.v0.ProvisionMallocBDevRequest")
	proto.RegisterType((*ProvisionMallocBDevReply)(nil), "oim.v0.ProvisionMallocBDevReply")
	proto.RegisterType((*CheckMallocBDevRequest)(nil), "oim.v0.CheckMallocBDevRequest")
	proto.RegisterType((*CheckMallocBDevReply)(nil), "oim.v0.CheckMallocBDevReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	// Adds a new entry to the registry DB or overwrites
	// an existing one.
	RegisterController(ctx context.Context, in *RegisterControllerRequest, opts ...grpc.CallOption) (*RegisterControllerReply, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) RegisterController(ctx context.Context, in *RegisterControllerRequest, opts ...grpc.CallOption) (*RegisterControllerReply, error) {
	out := new(RegisterControllerReply)
	err := grpc.Invoke(ctx, "/oim.v0.Registry/RegisterController", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	// Adds a new entry to the registry DB or overwrites
	// an existing one.
	RegisterController(context.Context, *RegisterControllerRequest) (*RegisterControllerReply, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_RegisterController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RegisterController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oim.v0.Registry/RegisterController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RegisterController(ctx, req.(*RegisterControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oim.v0.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterController",
			Handler:    _Registry_RegisterController_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oim.proto",
}

// Client API for Controller service

type ControllerClient interface {
	// Makes a volume available via the accelerator hardware.
	// The call must be idempotent: when a caller is unsure whether
	// a call was executed or what the result was, MapVolume
	// can be called again and will succeed without changing
	// anything.
	MapVolume(ctx context.Context, in *MapVolumeRequest, opts ...grpc.CallOption) (*MapVolumeReply, error)
	// Removes access to the volume.
	// Also idempotent.
	UnmapVolume(ctx context.Context, in *UnmapVolumeRequest, opts ...grpc.CallOption) (*UnmapVolumeReply, error)
	// Creates or deletes (when size is zero) an
	// in-memory BDev for testing.
	ProvisionMallocBDev(ctx context.Context, in *ProvisionMallocBDevRequest, opts ...grpc.CallOption) (*ProvisionMallocBDevReply, error)
	// Checks that the BDev exists. Returns
	// gRPC NOT_FOUND status if not.
	CheckMallocBDev(ctx context.Context, in *CheckMallocBDevRequest, opts ...grpc.CallOption) (*CheckMallocBDevReply, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) MapVolume(ctx context.Context, in *MapVolumeRequest, opts ...grpc.CallOption) (*MapVolumeReply, error) {
	out := new(MapVolumeReply)
	err := grpc.Invoke(ctx, "/oim.v0.Controller/MapVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) UnmapVolume(ctx context.Context, in *UnmapVolumeRequest, opts ...grpc.CallOption) (*UnmapVolumeReply, error) {
	out := new(UnmapVolumeReply)
	err := grpc.Invoke(ctx, "/oim.v0.Controller/UnmapVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ProvisionMallocBDev(ctx context.Context, in *ProvisionMallocBDevRequest, opts ...grpc.CallOption) (*ProvisionMallocBDevReply, error) {
	out := new(ProvisionMallocBDevReply)
	err := grpc.Invoke(ctx, "/oim.v0.Controller/ProvisionMallocBDev", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) CheckMallocBDev(ctx context.Context, in *CheckMallocBDevRequest, opts ...grpc.CallOption) (*CheckMallocBDevReply, error) {
	out := new(CheckMallocBDevReply)
	err := grpc.Invoke(ctx, "/oim.v0.Controller/CheckMallocBDev", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	// Makes a volume available via the accelerator hardware.
	// The call must be idempotent: when a caller is unsure whether
	// a call was executed or what the result was, MapVolume
	// can be called again and will succeed without changing
	// anything.
	MapVolume(context.Context, *MapVolumeRequest) (*MapVolumeReply, error)
	// Removes access to the volume.
	// Also idempotent.
	UnmapVolume(context.Context, *UnmapVolumeRequest) (*UnmapVolumeReply, error)
	// Creates or deletes (when size is zero) an
	// in-memory BDev for testing.
	ProvisionMallocBDev(context.Context, *ProvisionMallocBDevRequest) (*ProvisionMallocBDevReply, error)
	// Checks that the BDev exists. Returns
	// gRPC NOT_FOUND status if not.
	CheckMallocBDev(context.Context, *CheckMallocBDevRequest) (*CheckMallocBDevReply, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_MapVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).MapVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oim.v0.Controller/MapVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).MapVolume(ctx, req.(*MapVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_UnmapVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmapVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).UnmapVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oim.v0.Controller/UnmapVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).UnmapVolume(ctx, req.(*UnmapVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ProvisionMallocBDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionMallocBDevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ProvisionMallocBDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oim.v0.Controller/ProvisionMallocBDev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ProvisionMallocBDev(ctx, req.(*ProvisionMallocBDevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_CheckMallocBDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMallocBDevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).CheckMallocBDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oim.v0.Controller/CheckMallocBDev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).CheckMallocBDev(ctx, req.(*CheckMallocBDevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oim.v0.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapVolume",
			Handler:    _Controller_MapVolume_Handler,
		},
		{
			MethodName: "UnmapVolume",
			Handler:    _Controller_UnmapVolume_Handler,
		},
		{
			MethodName: "ProvisionMallocBDev",
			Handler:    _Controller_ProvisionMallocBDev_Handler,
		},
		{
			MethodName: "CheckMallocBDev",
			Handler:    _Controller_CheckMallocBDev_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oim.proto",
}

func init() { proto.RegisterFile("oim.proto", fileDescriptor_oim_fdf6812384e30b76) }

var fileDescriptor_oim_fdf6812384e30b76 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0xdd, 0xd6, 0x11, 0xda, 0xbb, 0x31, 0xa6, 0xcb, 0x54, 0xb2, 0x80, 0xc6, 0x30, 0x3c, 0xec,
	0xa9, 0x83, 0x22, 0xde, 0x90, 0x90, 0x5a, 0x90, 0xd8, 0x43, 0xd1, 0x88, 0x04, 0x0f, 0x95, 0xd0,
	0x94, 0x26, 0x77, 0xad, 0x85, 0x53, 0x1b, 0x3b, 0x0d, 0x2a, 0x7f, 0x83, 0xff, 0xc4, 0xef, 0x42,
	0xb1, 0x9b, 0x36, 0xa3, 0xe9, 0xa4, 0xbd, 0xd9, 0xe7, 0x1e, 0x9f, 0xfb, 0x71, 0x6e, 0x02, 0x2d,
	0xc9, 0xd3, 0x8e, 0xd2, 0x32, 0x93, 0xe8, 0x15, 0xc7, 0xfc, 0x55, 0x70, 0x32, 0x96, 0x72, 0x2c,
	0xe8, 0xdc, 0xa2, 0xa3, 0xd9, 0xf5, 0xf9, 0x2f, 0x1d, 0x29, 0x45, 0xda, 0x38, 0x1e, 0x1b, 0xc2,
	0x71, 0x48, 0x63, 0x6e, 0x32, 0xd2, 0x7d, 0x39, 0xcd, 0xb4, 0x14, 0x82, 0x74, 0x48, 0x3f, 0x67,
	0x64, 0x32, 0x7c, 0x01, 0x0f, 0xe2, 0x25, 0x78, 0xc5, 0x13, 0x7f, 0xfb, 0x74, 0xfb, 0xac, 0x15,
	0xee, 0xaf, 0xc0, 0x8b, 0x04, 0x7d, 0xb8, 0x1f, 0x25, 0x89, 0x26, 0x63, 0xfc, 0x1d, 0x1b, 0x2e,
	0xaf, 0xec, 0x18, 0x1e, 0xd7, 0x69, 0x2b, 0x31, 0x67, 0x7f, 0xb6, 0xe1, 0x70, 0x10, 0xa9, 0x6f,
	0x52, 0xcc, 0x52, 0x2a, 0xd3, 0x3d, 0x81, 0x56, 0x6e, 0x81, 0x55, 0xaa, 0xa6, 0x03, 0x2e, 0x12,
	0xec, 0x80, 0x97, 0x46, 0x42, 0xc8, 0xd8, 0x66, 0xd9, 0xeb, 0x1e, 0x75, 0x5c, 0x87, 0x9d, 0x81,
	0x45, 0x2f, 0x23, 0x1d, 0xa5, 0xe6, 0xd3, 0x56, 0xb8, 0x60, 0xe1, 0x19, 0xec, 0xc6, 0xa4, 0x26,
	0x7e, 0xc3, 0xb2, 0xb1, 0x64, 0xf7, 0x49, 0x4d, 0x96, 0x5c, 0xcb, 0xe8, 0x35, 0xc1, 0x53, 0x16,
	0x61, 0x07, 0xb0, 0x5f, 0x55, 0x63, 0x2f, 0x01, 0x56, 0x7c, 0x6c, 0x83, 0x67, 0x28, 0xd6, 0x94,
	0x2d, 0x6a, 0x5b, 0xdc, 0xd8, 0x3b, 0x38, 0xa8, 0xb4, 0xa2, 0xc4, 0xbc, 0x60, 0x26, 0x94, 0xf3,
	0x98, 0x4a, 0xa6, 0xbb, 0x21, 0xc2, 0xae, 0x89, 0x0d, 0x5f, 0xcc, 0xc9, 0x9e, 0xd9, 0x6b, 0xc0,
	0xaf, 0xd3, 0xf4, 0x2e, 0xa3, 0x60, 0x08, 0x87, 0x37, 0x9e, 0x14, 0x03, 0x1d, 0x40, 0x70, 0xa9,
	0x65, 0xce, 0x0d, 0x97, 0x53, 0xd7, 0x43, 0xef, 0x03, 0xe5, 0x15, 0xb9, 0x51, 0x42, 0xf9, 0xd5,
	0x34, 0x4a, 0xcb, 0x9a, 0x9a, 0x05, 0xf0, 0x39, 0x4a, 0x5d, 0x55, 0xfc, 0x37, 0xd9, 0xaa, 0x1a,
	0xa1, 0x3d, 0xb3, 0x00, 0xfc, 0x5a, 0xb9, 0x22, 0xd5, 0x5b, 0x68, 0xf7, 0x27, 0x14, 0xff, 0xb8,
	0x5b, 0x1a, 0xd6, 0x86, 0xa3, 0xb5, 0x67, 0x4a, 0xcc, 0xbb, 0xd7, 0xd0, 0x74, 0x5b, 0xa2, 0xe7,
	0x38, 0x04, 0x5c, 0xdf, 0x18, 0x7c, 0x5e, 0x9a, 0xb7, 0x71, 0x53, 0x83, 0x67, 0xb7, 0x51, 0x8a,
	0xa2, 0xb7, 0xba, 0x7f, 0x77, 0x00, 0x2a, 0xa2, 0xef, 0xa1, 0xb5, 0x74, 0x0d, 0xfd, 0xd5, 0x32,
	0xdd, 0x34, 0x22, 0x68, 0xd7, 0x44, 0xac, 0x1e, 0x7e, 0x84, 0xbd, 0x8a, 0x0b, 0x18, 0x94, 0xc4,
	0x75, 0x37, 0x03, 0xbf, 0x36, 0xe6, 0x64, 0xbe, 0xc3, 0xa3, 0x9a, 0x49, 0x23, 0x2b, 0x9f, 0x6c,
	0x76, 0x35, 0x38, 0xbd, 0x95, 0xe3, 0xe4, 0xbf, 0xc0, 0xc3, 0xff, 0xa6, 0x8e, 0x27, 0xcb, 0x6f,
	0xa1, 0xd6, 0xc5, 0xe0, 0xe9, 0xc6, 0xb8, 0x95, 0xec, 0xdd, 0x1b, 0x36, 0x24, 0x4f, 0x47, 0x9e,
	0xfd, 0x81, 0xbc, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x39, 0x1d, 0x04, 0x75, 0x04, 0x00,
	0x00,
}
